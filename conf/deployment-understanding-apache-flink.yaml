apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: understanding-apache-flink
spec:
  kafka:
    version: 3.6.1
    replicas: 3
    listeners:
      - name: plain
        port: 9092
        type: internal
        tls: false
      - name: tls
        port: 9093
        type: internal
        tls: true
      - name: extlb
        # documentation at https://strimzi.io/docs/operators/latest/configuring.html#type-GenericKafkaListener-reference
        # A new loadbalancer service is created for every Kafka broker pod. An additional loadbalancer is created to
        # serve as a Kafka bootstrap address. Loadbalancers listen to the specified port number
        port: 9094
        type: loadbalancer
        tls: false
        configuration:
          loadBalancerSourceRanges:
            - 255.255.255.252/30
    config:
      offsets.topic.replication.factor: 3
      transaction.state.log.replication.factor: 3
      transaction.state.log.min.isr: 2
      default.replication.factor: 3
      min.insync.replicas: 2
      inter.broker.protocol.version: "3.6"
    storage:
      type: ephemeral
  zookeeper:
    replicas: 1
    resources:
      requests:
        memory: 128M
      limits:
        memory: 256M
    storage:
      type: ephemeral
  #      size: 100M
  #      deleteClaim: false
  entityOperator:
    topicOperator: {}
    userOperator: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kafka-ui
spec:
  selector:
    matchLabels:
      app: kafka-ui
  template:
    metadata:
      labels:
        app: kafka-ui
    spec:
      containers:
        - image: provectuslabs/kafka-ui:v0.4.0
          name: kafka-ui
          ports:
            - containerPort: 8080
          env:
            - name: KAFKA_CLUSTERS_0_NAME
              value: "data-gen-agent"
            - name: KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS
              value: "understanding-apache-flink-kafka-bootstrap:9092"
            - name: SERVER_FORWARDHEADERSSTRATEGY
              value: FRAMEWORK
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: data-gen-agent-app
  labels:
    app: data-gen-agent-app
spec:
  selector:
    matchLabels:
      app: data-gen-agent-app
  template:
    metadata:
      labels:
        app: data-gen-agent-app
    spec:
      containers:
        - image: minmay/data-gen-agent-js:1.0.0
          imagePullPolicy: Never
          name: data-gen-gent
          env:
            - name: KAFKA_BROKERS
              value: "understanding-apache-flink-kafka-bootstrap:9092"
            - name: LOOP_MS
              value: "10000"
            - name: TAGS
              value: "/opt/data-gen-agent/conf/tags.yaml"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: localstack-configmap
data:
  init.sh: |
    #!/usr/bin/env bash
    awslocal s3 mb s3://understanding-apache-flink
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: localstack
  labels:
    app: localstack
spec:
  selector:
    matchLabels:
      app: localstack
  template:
    metadata:
      labels:
        app: localstack
    spec:
      containers:
        - image: localstack/localstack:stable
          name: localstack
          env:
            - name: SERVICES
              value: s3
          ports:
            - containerPort: 4566
          volumeMounts:
            - name: localstack-init
              mountPath: /etc/localstack/init/ready.d
      volumes:
        - name: localstack-init
          configMap:
            name: localstack-configmap
            defaultMode: 0755
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: builds
  labels:
    app: understanding-apache-flink
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50M
---
apiVersion: batch/v1
kind: Job
metadata:
  name: understanding-apache-flink-build
spec:
  template:
    spec:
      containers:
        - name: understanding-apache-flink-build
          image: minmay/understanding-apache-flink:latest
          imagePullPolicy: Never
          volumeMounts:
            - mountPath: /deployments
              name: build-storage
          command: [
            "cp", "/opt/understanding-apache-flink/build/libs/understanding-apache-flink-all.jar",
            "/deployments"
          ]
      restartPolicy: Never
      volumes:
        - name: build-storage
          persistentVolumeClaim:
            claimName: builds
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: influxdb
  labels:
    app: influxdb
spec:
  selector:
    matchLabels:
      app: influxdb
  template:
    metadata:
      labels:
        app: influxdb
    spec:
      containers:
        - image: influxdb:2.7.5-alpine
          name: influxdb
          env:
            - name: DOCKER_INFLUXDB_INIT_MODE
              value: setup
            - name: DOCKER_INFLUXDB_INIT_USERNAME
              value: minmay
            - name: DOCKER_INFLUXDB_INIT_PASSWORD
              value: understanding apache flink
            - name: DOCKER_INFLUXDB_INIT_ORG
              value: minmay
            - name: DOCKER_INFLUXDB_INIT_BUCKET
              value: tags
            - name: DOCKER_INFLUXDB_INIT_RETENTION
              value: "7d"
            - name: DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
              value: Xn0EmOiR3zexX-6JPCh9kIWFeFqHkyZIkCn7Xil8wNaVmi9r6EC2Hvv7ncX7DpBkylagg5u17879IIwEArq4kQ==
          ports:
            - containerPort: 8086
          volumeMounts:
            - name: influx-storage
              mountPath: /var/lib/influxdb2
      volumes:
        - name: influx-storage
          emptyDir:
            sizeLimit: 100M
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: telegraf-configmap
data:
  telegraf.conf: |
    [[outputs.influxdb_v2]]
    ## The URLs of the InfluxDB cluster nodes.
    ##
    ## Multiple URLs can be specified for a single cluster, only ONE of the
    ## urls will be written to each interval.
    ##   ex: urls = ["https://us-west-2-1.aws.cloud2.influxdata.com"]
    urls = ["$INFLUXDB_HOSTNAME_AND_PORT"]
    
    ## API token for authentication.
    token = "$DOCKER_INFLUXDB_INIT_ADMIN_TOKEN"
    
    ## Organization is the name of the organization you wish to write to; must exist.
    organization = "$DOCKER_INFLUXDB_INIT_ORG"
    
    ## Destination bucket to write into.
    bucket = "$DOCKER_INFLUXDB_INIT_BUCKET"
    
    [[inputs.kafka_consumer]]
    ## Kafka brokers.
    brokers = ["$KAFKA_BROKER"]
    
    ## Topics to consume.
    topics = ["$TELEGRAF_TIME_SERIES_TOPIC"]
    
    ## Name of the consumer group.
    consumer_group = "$TELEGRAF_TIME_SERIES_TOPIC_CONSUMER_GROUP"
    
    ## Data format to consume.
    ## Each data format has its own unique set of configuration options, read
    ## more about them here:
    ## https://github.com/influxdata/telegraf/blob/master/docs/DATA_FORMATS_INPUT.md
    data_format = "influx"
    
    ## Optional TLS Config
    # tls_ca = "/etc/telegraf/ca.pem"
    # tls_cert = "/etc/telegraf/cert.pem"
    # tls_key = "/etc/telegraf/key.pem"
    ## Use TLS but skip chain & host verification
    insecure_skip_verify = false
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: telegraf
  labels:
    app: telegraf
spec:
  selector:
    matchLabels:
      app: telegraf
  template:
    metadata:
      labels:
        app: telegraf
    spec:
      containers:
        - image: telegraf:1.30.0-alpine
          name: telegraf
          env:
            - name: INFLUXDB_HOSTNAME_AND_PORT
              value: http://influxdb-service:8086
            - name: DOCKER_INFLUXDB_INIT_ADMIN_TOKEN
              value: Xn0EmOiR3zexX-6JPCh9kIWFeFqHkyZIkCn7Xil8wNaVmi9r6EC2Hvv7ncX7DpBkylagg5u17879IIwEArq4kQ==
            - name: DOCKER_INFLUXDB_INIT_ORG
              value: minmay
            - name: DOCKER_INFLUXDB_INIT_BUCKET
              value: tags
            - name: KAFKA_BROKER
              value: understanding-apache-flink-kafka-bootstrap:9092
            - name: TELEGRAF_TIME_SERIES_TOPIC
              value: telegraf
            - name: TELEGRAF_TIME_SERIES_TOPIC_CONSUMER_GROUP
              value: telegraf
          ports:
            - containerPort: 8125
            - containerPort: 8092
            - containerPort: 8094
          volumeMounts:
            - name: telegraf-config
              mountPath: /etc/telegraf/
      volumes:
        - name: telegraf-config
          configMap:
            name: telegraf-configmap
---
# https://github.com/cloudlena/s3manager
apiVersion: apps/v1
kind: Deployment
metadata:
  name: s3manager
  labels:
    app: s3manager
spec:
  selector:
    matchLabels:
      app: s3manager
  template:
    metadata:
      labels:
        app: s3manager
    spec:
      containers:
        - image: cloudlena/s3manager:v0.5.0
          name: s3manager
          env:
            - name: ENDPOINT
              value: localstack-service:4566
            - name: ACCESS_KEY_ID
              value: understanding-apache-flink
            - name: SECRET_ACCESS_KEY
              value: understanding-apache-flink
            - name: REGION
              value: us-west-1
            - name: USE_SSL
              value: "false"
          ports:
            - containerPort: 8080
